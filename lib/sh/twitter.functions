
   BASEDIR=`readlink -f $0   | #
            rev              | #
            cut -d "/" -f 2- | #
            rev`

    TWACCOUNT=`find $BASEDIR -name "twitter.account" | head -n 1`
   TWUSERNAME=`cat $TWACCOUNT | grep "username" | cut -d ":" -f 2`
    TWURLLOCK="/tmp/twurl.lock"

# --------------------------------------------------------------------------- #
   function setdefaultuserandtweet() {

     while [ `ps aux | grep twurl | #
              grep -v grep | wc -l` -gt 0 ] ||
           [ -f $TWURLLOCK ]
      do 
            COLLISION=`ps axo command | #
                       grep twurl | grep -v grep | #
                       sed ':a;N;$!ba;s/\n/, /g'`
            WHEN=`date "+%d.%m.%Y %H:%M:%S"`
            if [ `echo $COLLISION | wc -c` -gt 1 ];then
            echo "WAITING (${WHEN} -> ${COLLISION})" >> ${TMP}.collision.log
            fi
            if  [ -f $TWURLLOCK ];then
            LOCKMESSAGE="twurllock: "`cat $TWURLLOCK`
            echo "WAITING (${WHEN} -> $LOCKMESSAGE)" >> ${TMP}.collision.log
            fi
            sleep 5
     done
           echo "$TWUSERNAME" > $TWURLLOCK
           /usr/local/bin/twurl set default $TWUSERNAME
           EVALTHIS="/usr/local/bin/twurl $*"
           eval $EVALTHIS
           rm $TWURLLOCK
   }

   TWURL="setdefaultuserandtweet"

# --------------------------------------------------------------------------- #
  function tweet(){
  
    UPDATE="/1.1/statuses/update.json" # TODO?: MOVE OUTSIDE ?

    FLAGS=`echo "$*" | #
           sed 's/ -.=[^ ]*\b/\n&/g' | #
           grep "^ -.=" | cut -d " " -f 2`
    ISREPLY=`echo $FLAGS | sed 's/ /\n/' | #
             grep -- "^-r" | #
             head -n 1 | cut -d "=" -f 2 | #
             sed 's/^[0-9]/\&in_reply_to_status_id=&/'`

    INPUTMINUSFLAGS=`echo $* | sed 's/ -.=[^ ]*\b//g'`
    I="$INPUTMINUSFLAGS"
    MEDIA=`echo "$I"       | #
           rev             | #
           cut -d " " -f 1 | #
           rev`  
    if [ `echo $MEDIA               | #
          egrep ".jpg$|.png$|.gif$" | #
          wc -l` -gt 0 ]; then

    MEDIAIDS=`$TWURL -H upload.twitter.com \
             "/1.1/media/upload.json"       \
              -f $MEDIA -F media -X POST  | #
              sed 's/,/\n/g'              | #
              grep "media_id_string"      | #
              cut -d ":" -f 2 | cut -d "\"" -f 2`

          TEXT=`echo "$I"        | #
                rev              | #
                cut -d " " -f 2- | #
                rev              | #
                sed 's/&/+/g'`     # PREVENT ERROR (SUPERHACK!!)

          if [ `echo "$I"      | #
                sed 's/ /\n/g' | #
                wc -l` -gt 1   ]; then
                OPTIONS="media_ids=${MEDIAIDS}&status=${TEXT}"
          else
                OPTIONS="media_ids=${MEDIAIDS}"
          fi
    else
          TEXT=`echo "$I"        | #
                sed 's/&/+/g'`     # PREVENT ERROR (SUPERHACK!!)
          OPTIONS="status=${TEXT}"
    fi

    TWEET=`$TWURL \"$UPDATE\" -r \"$OPTIONS${ISREPLY}\"`

    if [ `echo $TWEET | grep '"errors":' | wc -l` -gt 0 ]
     then
          echo "There was an error. Deleting ${MEDIA%%.*}"
          echo $TWEET
        # rm ${MEDIA%%.*}.*
          echo "$TWURL \"$UPDATE\" -d \"$OPTIONS\""
          export TWTRPRT="error"
    else

    STATUSID=`echo $TWEET       | #
              sed 's/","/\n/g'  | #
              sed 's/id/\nid/g' | #
              grep '^id":'      | #
              head -n 1         | #
              sed 's/[^0-9]*//g'` # RM ALL BUT NUMBERS
    fi

  }
# --------------------------------------------------------------------------- #
  function getMentions() {

  $TWURL /1.1/statuses/mentions_timeline.json > ${TMP}.timeline

 ( IFS=$'\n'
   for MENTION in `sed 's/{"created_at/\nXXXXXXX/g' ${TMP}.timeline |#
                   grep "^XXXXXXX"`
    do
      MENTIONTXT=`echo $MENTION    | #
                  sed 's/","/\n/g' | #
                  grep '^text"'    | #
                  sed 's/^text":"//'`
      MENTIONID=`echo $MENTION     | #
                 sed 's/","/\n/g'  | #
                 sed 's/id/\nid/g' | #
                 grep '^id":'      | #
                 head -n 1         | #
                 sed 's/[^0-9]*//g'` # RM ALL BUT NUMBERS
      MENTIONFROM=`echo $MENTION            | #
                   sed 's/","/\n/g'         | #
                   grep '^screen_name"'     | #
                   sed 's/^screen_name":"//'` #
      echo ""
      echo "-${MENTIONID}-----------------"
      echo  $MENTIONTXT
      echo  $MENTIONID
      echo  $MENTIONFROM
      echo "--------------------------------------"
      echo ""

  done )

  rm ${TMP}.timeline
 

 }
# --------------------------------------------------------------------------- #
  function getFavs() {

  N="200";COUNTRESULTS="200";FROMNAME="$1"
  if [ `echo "$FROMNAME" | wc -c` -lt 2 ];then FROMNAME="$TWUSERNAME"; fi
  OPTIONS="count=$N&screen_name=$FROMNAME"

  if [ -f ${TMP}.favcollect ]; then rm ${TMP}.favcollect; fi

  while [ $COUNTRESULTS -ge 10 ];do

  $TWURL \"/1.1/favorites/list.json?$OPTIONS\" > ${TMP}.timeline

 ( IFS=$'\n'
   for FAV in `sed 's/{"created_at/\nXXXXXXX/g' ${TMP}.timeline | #
               grep "^XXXXXXX"`
    do
      FAVTXT=`echo $FAV        | #
              sed 's/","/\n/g' | #
              grep '^text"'    | #
              sed 's/^text":"//'`
      FAVID=`echo $FAV         | #
             sed 's/","/\n/g'  | #
             sed 's/id/\nid/g' | #
             grep '^id":'      | #
             head -n 1         | #
             sed 's/[^0-9]*//g'` # RM ALL BUT NUMBERS
      FAVDATE=`echo $FAV            | #
               sed 's/","/\n/g'     | #
               grep '^XXXXXXX"'     | #
               sed 's/^XXXXXXX":"//'` #
      FAVFROM="$FROMNAME"
      FAVXURLS=`echo $FAV | sed 's/"urls":/\nXxXxXxX&/g' | #
                grep ^XxXxXxX | head -n 1 | #
                sed 's/"expanded_url":/\nYyYyYyY&/g' | #
                sed 's/","/\n/g' | grep "^YyYyYyY" | #
                cut -d ":" -f 2- | sort -u | sed 's/^"*//' | #
                sed ':a;N;$!ba;s/\n/ /g'`
      FAVODATE=`echo $FAV            | sed 's/","/\n/g'     | #
                sed 's/"created_at":/\nXxXxXxX&/g' | grep "^XxXxXxX" | #
                cut -d ":" -f 2- | sed 's/^"*//'`
      FAVOFROM=`echo $FAV                | #
                sed 's/","/\n/g'         | #
                grep '^screen_name"'     | #
                head -n 1                | #
                sed 's/^screen_name":"//'` #
      echo ""                                         >> ${TMP}.favcollect
      echo "-${FAVID}-----------------"               >> ${TMP}.favcollect
      echo  "$FAVTXT"                                 >> ${TMP}.favcollect
      echo  "$FAVID"                                  >> ${TMP}.favcollect
      echo  "fwhen: $FAVDATE"                         >> ${TMP}.favcollect
      echo  "ffrom: $FAVFROM"                         >> ${TMP}.favcollect
      echo  "owhen: $FAVODATE"                        >> ${TMP}.favcollect
      echo  "ofrom: $FAVOFROM"                        >> ${TMP}.favcollect
      echo  "xurls: $FAVXURLS"                        >> ${TMP}.favcollect
      echo "--------------------------------------"   >> ${TMP}.favcollect
      echo ""                                         >> ${TMP}.favcollect

      echo "$FAVID" > ${TMP}.favid
  done )

  LASTID=`cat ${TMP}.favid | tail -n 1`
  COUNTRESULTS=`sed 's/{"created_at/\nXXXXXXX/g' ${TMP}.timeline  | #
                grep "^XXXXXXX" | wc -l`
  OPTIONS="count=$N&screen_name=$FROMNAME&max_id=$LASTID"

  done
 # ----------------------------------------------------------------------- #
 # REMOVE DUPLICATE (PARAGRAPHS) 
 # ----------------------------------------------------------------------- #
   sed '/./{H;d;};x;s/\n/={NL}=/g' ${TMP}.favcollect | #
   sort -u | sed '1s/={NL}=//;s/={NL}=/\n/g' > ${TMP}.tmpcollect
   mv ${TMP}.tmpcollect ${TMP}.favcollect; echo >> ${TMP}.favcollect
 # ----------------------------------------------------------------------- #
 # OUTPUT
 # ----------------------------------------------------------------------- #
   cat ${TMP}.favcollect
 # ----------------------------------------------------------------------- #
 # CLEAN UP
 # ----------------------------------------------------------------------- #
   rm ${TMP}.favcollect ${TMP}.favid ${TMP}.timeline

 }
# --------------------------------------------------------------------------- #
  function conformMedia() {

   EDITSRC=$1;SAVETHIS=$2;
 # ------------------------------------------------------------------------- #
 # REMOVE 'XX_' LAYERS
 # ------------------------------------------------------------------------- #
   BFOO=NL`echo ${RANDOM} | cut -c 1`F0;SFOO=SP`echo ${RANDOM} | cut -c 1`FO

   cp -p ${EDITSRC} ${EDITSRC}.original     # MAKE BACKUP

   sed ":a;N;\$!ba;s/\n/$BFOO/g" $EDITSRC | # REMOVE ALL LINEBREAKS (BUT SAVE)
   sed "s/ /$SFOO/g"                      | # REMOVE ALL SPACE (BUT SAVE)
   sed 's/<g/\n&/g'                       | # MOVE GROUP TO NEW LINES
   sed '/groupmode="layer"/s/<g/4Fgt7R/g' | # PLACEHOLDER FOR LAYERGROUP OPEN
   sed ':a;N;$!ba;s/\n//g'                | # REMOVE ALL LINEBREAKS
   sed 's/4Fgt7R/\n<g/g'                  | # RESTORE LAYERGROUP OPEN + NEWLINE
   sed 's/<\/svg>/\n&/g'                  | # CLOSE TAG ON SEPARATE LINE
   sed 's/display:none/display:inline/g'  | # MAKE VISIBLE EVEN WHEN HIDDEN
   grep -v 'label="XX_'                   | # REMOVE EXCLUDED LAYERS
   sed "s/$BFOO/\n/g"                     | # RESTORE LINEBREAKS
   sed "s/$SFOO/ /g"                      | # RESTORE LINEBREAKS
   tee > ${EDITSRC}.tmp

   mv ${EDITSRC}.tmp ${EDITSRC}             # MOVE IN PLACE (TEMPORARILY)
 # ------------------------------------------------------------------------- #

      inkscape --export-png=${SAVETHIS} ${EDITSRC} > /dev/null 2>&1

    # MAKE 1 PIXEL 99% OPAQUE (THIS REALLY SHOULD BE DONE DIFFERENT!)
    # --------------------------------------------------------------- #
    # MAKE PIXEL FULL TRANSPARENT
      convert ${SAVETHIS} -alpha on -fill none \
                          -draw 'color 0,0 point' ${TMP}.1.png
    # MAKE FULL IMAGE 99% OPAQUE
      convert ${SAVETHIS} -alpha set -channel A \
                          -evaluate set 99% ${TMP}.2.png
    # COMBINE 
      composite -gravity center ${TMP}.1.png ${TMP}.2.png ${SAVETHIS}
      rm ${TMP}.1.png ${TMP}.2.png

 # ------------------------------------------------------------------------- #
    mv ${EDITSRC}.original ${EDITSRC} # MOVE BACK IN PLACE
 }

# --------------------------------------------------------------------------- #

